# loader.c
loader_write_rom(const char *name, uint64_t gpa, uint64_t size, bool isrom) "%s: @0x%"PRIx64" size=0x%"PRIx64" ROM=%d"

# qdev.c
qdev_reset(void *obj, const char *objtype) "obj=%p(%s)"
qdev_reset_all(void *obj, const char *objtype) "obj=%p(%s)"
qdev_reset_tree(void *obj, const char *objtype) "obj=%p(%s)"
qbus_reset(void *obj, const char *objtype) "obj=%p(%s)"
qbus_reset_all(void *obj, const char *objtype) "obj=%p(%s)"
qbus_reset_tree(void *obj, const char *objtype) "obj=%p(%s)"
qdev_update_parent_bus(void *obj, const char *objtype, void *oldp, const char *oldptype, void *newp, const char *newptype) "obj=%p(%s) old_parent=%p(%s) new_parent=%p(%s)"

# resettable.c
resettable_reset(void *obj, int cold) "obj=%p cold=%d"
resettable_reset_assert_begin(void *obj, int cold) "obj=%p cold=%d"
resettable_reset_assert_end(void *obj) "obj=%p"
resettable_reset_release_begin(void *obj, int cold) "obj=%p cold=%d"
resettable_reset_release_end(void *obj) "obj=%p"
resettable_change_parent(void *obj, void *o, unsigned oc, void *n, unsigned nc) "obj=%p from=%p(%d) to=%p(%d)"
resettable_phase_enter_begin(void *obj, const char *objtype, unsigned count, int type) "obj=%p(%s) count=%d type=%d"
resettable_phase_enter_exec(void *obj, const char *objtype, int type, int has_method) "obj=%p(%s) type=%d method=%d"
resettable_phase_enter_end(void *obj, const char *objtype, unsigned count) "obj=%p(%s) count=%d"
resettable_phase_hold_begin(void *obj, const char *objtype, unsigned count, int type) "obj=%p(%s) count=%d type=%d"
resettable_phase_hold_exec(void *obj, const char *objtype, int has_method) "obj=%p(%s) method=%d"
resettable_phase_hold_end(void *obj, const char *objtype, unsigned count) "obj=%p(%s) count=%d"
resettable_phase_exit_begin(void *obj, const char *objtype, unsigned count, int type) "obj=%p(%s) count=%d type=%d"
resettable_phase_exit_exec(void *obj, const char *objtype, int has_method) "obj=%p(%s) method=%d"
resettable_phase_exit_end(void *obj, const char *objtype, unsigned count) "obj=%p(%s) count=%d"
resettable_transitional_function(void *obj, const char *objtype) "obj=%p(%s)"

# clock.c
clock_set_source(const char *clk, const char *src) "'%s', src='%s'"
clock_disconnect(const char *clk) "'%s'"
clock_set(const char *clk, uint64_t old, uint64_t new) "'%s', %"PRIu64"Hz->%"PRIu64"Hz"
clock_propagate(const char *clk) "'%s'"
clock_update(const char *clk, const char *src, uint64_t hz, int cb) "'%s', src='%s', val=%"PRIu64"Hz cb=%d"
clock_set_mul_div(const char *clk, uint32_t oldmul, uint32_t mul, uint32_t olddiv, uint32_t div) "'%s', mul: %u -> %u, div: %u -> %u"

# reset.c
qemu_register_reset(const char *status) "%s"
qemu_unregister_reset(const char *status) "%s"
qemu_devices_reset(const char *status) "%s"

# machine.c
machine_get_kernel(const char *status) "%s"
machine_set_kernel(const char *status) "%s"
machine_get_initrd(const char *status) "%s"
machine_set_initrd(const char *status) "%s"
machine_get_append(const char *status) "%s"
machine_set_append(const char *status) "%s"
machine_get_dtb(const char *status) "%s"
machine_set_dtb(const char *status) "%s"
machine_get_dumpdtb(const char *status) "%s"
machine_set_dumpdtb(const char *status) "%s"
machine_get_phandle_start(const char *status) "%s"
machine_set_phandle_start(const char *status) "%s"
machine_get_dt_compatible(const char *status) "%s"
machine_set_dt_compatible(const char *status) "%s"
machine_get_dump_guest_core(const char *status) "%s"
machine_set_dump_guest_core(const char *status) "%s"
machine_get_mem_merge(const char *status) "%s"
machine_set_mem_merge(const char *status) "%s"
machine_get_usb(const char *status) "%s"
machine_set_usb(const char *status) "%s"
machine_get_graphics(const char *status) "%s"
machine_set_graphics(const char *status) "%s"
machine_get_firmware(const char *status) "%s"
machine_set_firmware(const char *status) "%s"
machine_set_suppress_vmdesc(const char *status) "%s"
machine_get_suppress_vmdesc(const char *status) "%s"
machine_get_memory_encryption(const char *status) "%s"
machine_set_memory_encryption(const char *status) "%s"
machine_check_confidential_guest_support(const char *status) "%s"
machine_get_nvdimm(const char *status) "%s"
machine_set_nvdimm(const char *status) "%s"
machine_get_hmat(const char *status) "%s"
machine_set_hmat(const char *status) "%s"
machine_get_nvdimm_persistence(const char *status) "%s"
machine_set_nvdimm_persistence(const char *status) "%s"
machine_class_allow_dynamic_sysbus_dev(const char *status) "%s"
device_is_dynamic_sysbus(const char *status) "%s"
device_type_is_dynamic_sysbus(const char *status) "%s"
machine_get_memdev(const char *status) "%s"
machine_set_memdev(const char *status) "%s"
machine_set_cpu_numa_node(const char *status) "%s"
machine_get_smp(const char *status) "%s"
machine_set_smp(const char *status) "%s"
machine_class_init(const char *status) "%s"
machine_class_base_init(const char *status) "%s"
machine_initfn(const char *status) "%s"
machine_finalize(const char *status) "%s"
machine_usb(const char *status) "%s"
machine_phandle_start(const char *status) "%s"
machine_dump_guest_core(const char *status) "%s"
machine_mem_merge(const char *status) "%s"
cpu_slot_to_string(const char *status) "%s"
numa_validate_initiator(const char *status) "%s"
machine_numa_finish_cpu_init(const char *status) "%s"
machine_run_board_init(const char *status) "%s"
qemu_add_machine_init_done_notifier(const char *status) "%s"
qemu_remove_machine_init_done_notifier(const char *status) "%s"
qdev_machine_creation_done(const char *status) "%s"

# gpio.c
qdev_get_named_gpio_list(const char *status) "%s"
qdev_init_gpio_in_named_with_opaque(const char *status) "%s"
qdev_init_gpio_in(const char *status) "%s"
qdev_init_gpio_out_named(const char *status) "%s"
qdev_init_gpio_out(const char *status) "%s"
qdev_get_gpio_in_named(const char *status) "%s"
qdev_get_gpio_in(const char *status) "%s"
qdev_connect_gpio_out_named(const char *status) "%s"
qdev_get_gpio_out_connector(const char *status) "%s"
qdev_disconnect_gpio_out_named(const char *status) "%s"
qdev_intercept_gpio_out(const char *status) "%s"
qdev_connect_gpio_out(const char *status) "%s"
qdev_pass_gpios(const char *status) "%s"
